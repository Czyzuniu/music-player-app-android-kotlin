{
  "openapi": "3.0.1",
  "info": {
    "title": "Customer API V3",
    "description": "API that returns customers",
    "version": "v3"
  },
  "servers": [{
    "url": "https://apigw-test.abelandcole.co.uk/customer/v3"
  }],
  "paths": {
    "/customer/authentication/singleauthkey": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Create a one-time-key for access to a particular site page",
        "description": "Sample Request:\r\n\r\n    POST\r\n    {\r\n        \"PagePath\": \"/account/personaldetails\"\r\n    }",
        "operationId": "PostSingleAuthKey3",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleAuthKeyRequest"
              },
              "example": {
                "PagePath": "string"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleAuthKeyRequest"
              },
              "example": {
                "PagePath": "string"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleAuthKeyRequest"
              },
              "example": {
                "PagePath": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SingleAuthKeyRequest"
              },
              "example": {
                "PagePath": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created item.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "example": {
                  "Result": {
                    "PagePath": "string",
                    "KeyIdentifier": "string",
                    "ExpiresAt": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "example": {
                  "Result": {
                    "PagePath": "string",
                    "KeyIdentifier": "string",
                    "ExpiresAt": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "example": {
                  "Result": {
                    "PagePath": "string",
                    "KeyIdentifier": "string",
                    "ExpiresAt": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "example": {
                  "Result": {
                    "PagePath": "string",
                    "KeyIdentifier": "string",
                    "ExpiresAt": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "401": {
            "description": "Not authorised to use this endpoint",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "example": {
                  "Result": {
                    "PagePath": "string",
                    "KeyIdentifier": "string",
                    "ExpiresAt": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "example": {
                  "Result": {
                    "PagePath": "string",
                    "KeyIdentifier": "string",
                    "ExpiresAt": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer": {
      "get": {
        "tags": ["Customer"],
        "summary": "Gets the customer details.",
        "description": "Gets the customer details.",
        "operationId": "GetCustomer3",
        "responses": {
          "200": {
            "description": "Returns the customer",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Could not find customer",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Customer"],
        "summary": "Deletes the customer.",
        "description": "Deletes the customer.",
        "operationId": "DeleteCustomer3",
        "parameters": [{
          "name": "isHardDelete",
          "in": "query",
          "description": "True if we need to add a Data Removal Request record",
          "schema": {
            "type": "boolean",
            "default": false
          }
        }],
        "responses": {
          "204": {
            "description": "Customer deleted successfully"
          },
          "400": {
            "description": "Request is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "409": {
            "description": "Unable to delete customer",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Customer"],
        "summary": "Updates the customer details.",
        "description": "Updates the customer details.",
        "operationId": "PutCustomer3",
        "requestBody": {
          "description": "Customer information to be updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              },
              "example": {
                "Title": "string",
                "FirstName": "string",
                "LastName": "string",
                "HomePhone": "string",
                "MobilePhone": "string",
                "EmailAddress": "string",
                "ProfileName": "string",
                "DateOfBirth": "string",
                "CustomerType": 1,
                "CustomerTypeName": "string",
                "CustomerStatus": 0,
                "CustomerStatusName": "string",
                "CustomerActiveMarketingStatus": 1,
                "CustomerActiveMarketingStatusName": "string",
                "PaymentStatus": 1,
                "PaymentStatusName": "string",
                "CanAccess": true,
                "CanOrder": true,
                "NumDeliveries": 0,
                "DayNumber": 0,
                "SourceDescription": "string",
                "SourceReference": "string",
                "Owes": 0
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              },
              "example": {
                "Title": "string",
                "FirstName": "string",
                "LastName": "string",
                "HomePhone": "string",
                "MobilePhone": "string",
                "EmailAddress": "string",
                "ProfileName": "string",
                "DateOfBirth": "string",
                "CustomerType": 1,
                "CustomerTypeName": "string",
                "CustomerStatus": 0,
                "CustomerStatusName": "string",
                "CustomerActiveMarketingStatus": 1,
                "CustomerActiveMarketingStatusName": "string",
                "PaymentStatus": 1,
                "PaymentStatusName": "string",
                "CanAccess": true,
                "CanOrder": true,
                "NumDeliveries": 0,
                "DayNumber": 0,
                "SourceDescription": "string",
                "SourceReference": "string",
                "Owes": 0
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              },
              "example": {
                "Title": "string",
                "FirstName": "string",
                "LastName": "string",
                "HomePhone": "string",
                "MobilePhone": "string",
                "EmailAddress": "string",
                "ProfileName": "string",
                "DateOfBirth": "string",
                "CustomerType": 1,
                "CustomerTypeName": "string",
                "CustomerStatus": 0,
                "CustomerStatusName": "string",
                "CustomerActiveMarketingStatus": 1,
                "CustomerActiveMarketingStatusName": "string",
                "PaymentStatus": 1,
                "PaymentStatusName": "string",
                "CanAccess": true,
                "CanOrder": true,
                "NumDeliveries": 0,
                "DayNumber": 0,
                "SourceDescription": "string",
                "SourceReference": "string",
                "Owes": 0
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              },
              "example": {
                "Title": "string",
                "FirstName": "string",
                "LastName": "string",
                "HomePhone": "string",
                "MobilePhone": "string",
                "EmailAddress": "string",
                "ProfileName": "string",
                "DateOfBirth": "string",
                "CustomerType": 1,
                "CustomerTypeName": "string",
                "CustomerStatus": 0,
                "CustomerStatusName": "string",
                "CustomerActiveMarketingStatus": 1,
                "CustomerActiveMarketingStatusName": "string",
                "PaymentStatus": 1,
                "PaymentStatusName": "string",
                "CanAccess": true,
                "CanOrder": true,
                "NumDeliveries": 0,
                "DayNumber": 0,
                "SourceDescription": "string",
                "SourceReference": "string",
                "Owes": 0
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "403": {
            "description": "Changes forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "Result": {
                    "Title": "string",
                    "FirstName": "string",
                    "LastName": "string",
                    "HomePhone": "string",
                    "MobilePhone": "string",
                    "EmailAddress": "string",
                    "ProfileName": "string",
                    "DateOfBirth": "string",
                    "CustomerType": 1,
                    "CustomerTypeName": "string",
                    "CustomerStatus": 0,
                    "CustomerStatusName": "string",
                    "CustomerActiveMarketingStatus": 1,
                    "CustomerActiveMarketingStatusName": "string",
                    "PaymentStatus": 1,
                    "PaymentStatusName": "string",
                    "CanAccess": true,
                    "CanOrder": true,
                    "NumDeliveries": 0,
                    "DayNumber": 0,
                    "SourceDescription": "string",
                    "SourceReference": "string",
                    "Owes": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/password": {
      "patch": {
        "tags": ["Customer"],
        "summary": "Update the customers password",
        "description": "Update the customers password",
        "operationId": "UpdateCustomerPassword3",
        "requestBody": {
          "description": "ACCustomer.Core.Requests.CustomerChangePasswordRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerChangePasswordRequest"
              },
              "example": {
                "NewPassword": "string"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerChangePasswordRequest"
              },
              "example": {
                "NewPassword": "string"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerChangePasswordRequest"
              },
              "example": {
                "NewPassword": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerChangePasswordRequest"
              },
              "example": {
                "NewPassword": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customer password updated"
          },
          "400": {
            "description": "Request is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          },
          "409": {
            "description": "Unable to update customer password",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/dates": {
      "get": {
        "tags": ["Customer"],
        "summary": "Gets the customer dates",
        "description": "Gets the customer dates",
        "operationId": "GetCustomerDates3",
        "parameters": [{
          "name": "toDate",
          "in": "query",
          "description": "Format - date-time (as date-time in RFC3339). the date to fetch to, can be left null",
          "schema": {
            "type": "string",
            "format": "date-time"
          }
        }, {
          "name": "holidayFilter",
          "in": "query",
          "description": "Format - int32. filter type for selecting what to fetch",
          "schema": {
            "$ref": "#/components/schemas/HolidayFilter"
          }
        }],
        "responses": {
          "200": {
            "description": "Customer dates returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/date/{deliveryDate}": {
      "get": {
        "tags": ["Customer"],
        "summary": "Gets the customer date.",
        "description": "Gets the customer date.",
        "operationId": "GetCustomerDate3",
        "parameters": [{
          "name": "deliveryDate",
          "in": "path",
          "description": "Format - date-time (as date-time in RFC3339). the delivery date to fetch.",
          "required": true,
          "schema": {
            "type": "string",
            "format": "date-time"
          }
        }],
        "responses": {
          "200": {
            "description": "Customer date returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDatesResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "DeliveryDate": "string",
                    "OnHoliday": true,
                    "WeekCommencing": "string",
                    "WeekEnding": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Customer"],
        "summary": "Puts the customer date.",
        "description": "Puts the customer date.",
        "operationId": "PutCustomerDate3",
        "parameters": [{
          "name": "deliveryDate",
          "in": "path",
          "description": "Format - date-time (as date-time in RFC3339). the delivery date to Put.",
          "required": true,
          "schema": {
            "type": "string",
            "format": "date-time"
          }
        }],
        "requestBody": {
          "description": "the CustomerDate to Put.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDate"
              },
              "example": {
                "CustomerId": 0,
                "DeliveryDate": "string",
                "OnHoliday": true,
                "WeekCommencing": "string",
                "WeekEnding": "string"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDate"
              },
              "example": {
                "CustomerId": 0,
                "DeliveryDate": "string",
                "OnHoliday": true,
                "WeekCommencing": "string",
                "WeekEnding": "string"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDate"
              },
              "example": {
                "CustomerId": 0,
                "DeliveryDate": "string",
                "OnHoliday": true,
                "WeekCommencing": "string",
                "WeekEnding": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDate"
              },
              "example": {
                "CustomerId": 0,
                "DeliveryDate": "string",
                "OnHoliday": true,
                "WeekCommencing": "string",
                "WeekEnding": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Customer date updated"
          },
          "400": {
            "description": "Request is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/titles": {
      "get": {
        "tags": ["Customer"],
        "summary": "Gets the Titles records",
        "description": "Gets the Titles records",
        "operationId": "GetTitles3",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TitlesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitlesResponse"
                },
                "example": {
                  "Result": [{
                    "TitleId": 0,
                    "TitleDescription": "string",
                    "SpecifyOther": true,
                    "SortIndex": 0
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitlesResponse"
                },
                "example": {
                  "Result": [{
                    "TitleId": 0,
                    "TitleDescription": "string",
                    "SpecifyOther": true,
                    "SortIndex": 0
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "204": {
            "description": "Customer title returned"
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TitlesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitlesResponse"
                },
                "example": {
                  "Result": [{
                    "TitleId": 0,
                    "TitleDescription": "string",
                    "SpecifyOther": true,
                    "SortIndex": 0
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitlesResponse"
                },
                "example": {
                  "Result": [{
                    "TitleId": 0,
                    "TitleDescription": "string",
                    "SpecifyOther": true,
                    "SortIndex": 0
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/sources": {
      "get": {
        "tags": ["Customer"],
        "summary": "Gets the source records.",
        "description": "Gets the source records.",
        "operationId": "GetSources3",
        "parameters": [{
          "name": "includeInternal",
          "in": "query",
          "description": "To return internal Source or not",
          "schema": {
            "type": "boolean",
            "default": false
          }
        }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                },
                "example": {
                  "Result": [{
                    "SourceId": 0,
                    "SourceDescription": "string",
                    "DetailRequest": "string",
                    "IsInternal": true
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                },
                "example": {
                  "Result": [{
                    "SourceId": 0,
                    "SourceDescription": "string",
                    "DetailRequest": "string",
                    "IsInternal": true
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "204": {
            "description": "Sources returned"
          },
          "404": {
            "description": "No sources found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                },
                "example": {
                  "Result": [{
                    "SourceId": 0,
                    "SourceDescription": "string",
                    "DetailRequest": "string",
                    "IsInternal": true
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourcesResponse"
                },
                "example": {
                  "Result": [{
                    "SourceId": 0,
                    "SourceDescription": "string",
                    "DetailRequest": "string",
                    "IsInternal": true
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/address": {
      "get": {
        "tags": ["CustomerAddress"],
        "summary": "Gets the customer Address details.",
        "description": "Gets the customer Address details.",
        "operationId": "GetCustomerAddress3",
        "responses": {
          "200": {
            "description": "Returns the customer address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer does not have an address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["CustomerAddress"],
        "summary": "Sets the customer Address details.",
        "description": "Sets the customer Address details.",
        "operationId": "SetCustomerAddress3",
        "requestBody": {
          "description": "Address to set for the customer if customer found.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddress"
              },
              "example": {
                "CustomerId": 0,
                "PropertyNotes": "string",
                "DeliveryNotes": "string",
                "Postcode": "string",
                "House": "string",
                "Street": "string",
                "Locality": "string",
                "Town": "string",
                "County": "string",
                "Longitude": 0,
                "Latitude": 0,
                "DeliveryDay": 0,
                "DeliveryDayName": "string"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddress"
              },
              "example": {
                "CustomerId": 0,
                "PropertyNotes": "string",
                "DeliveryNotes": "string",
                "Postcode": "string",
                "House": "string",
                "Street": "string",
                "Locality": "string",
                "Town": "string",
                "County": "string",
                "Longitude": 0,
                "Latitude": 0,
                "DeliveryDay": 0,
                "DeliveryDayName": "string"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddress"
              },
              "example": {
                "CustomerId": 0,
                "PropertyNotes": "string",
                "DeliveryNotes": "string",
                "Postcode": "string",
                "House": "string",
                "Street": "string",
                "Locality": "string",
                "Town": "string",
                "County": "string",
                "Longitude": 0,
                "Latitude": 0,
                "DeliveryDay": 0,
                "DeliveryDayName": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddress"
              },
              "example": {
                "CustomerId": 0,
                "PropertyNotes": "string",
                "DeliveryNotes": "string",
                "Postcode": "string",
                "House": "string",
                "Street": "string",
                "Locality": "string",
                "Town": "string",
                "County": "string",
                "Longitude": 0,
                "Latitude": 0,
                "DeliveryDay": 0,
                "DeliveryDayName": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly updated customer address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "PropertyNotes": "string",
                    "DeliveryNotes": "string",
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/check/up": {
      "get": {
        "tags": ["HealthCheck"],
        "summary": "Check if the API has healthy connections to Database and any External connectors",
        "description": "Check if the API has healthy connections to Database and any External connectors",
        "operationId": "GetCheckUp3",
        "responses": {
          "200": {
            "description": "Services are all healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                },
                "example": {
                  "Result": {},
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                },
                "example": {
                  "Result": {},
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "One or more services is unhealthy",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                },
                "example": {
                  "Result": {},
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                },
                "example": {
                  "Result": {},
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/paymentmethod/clienttoken": {
      "post": {
        "tags": ["PaymentMethod"],
        "summary": "Gets the customer's clienttoken from braintree and creates if it it doesn't exist.",
        "description": "Gets the customer's clienttoken from braintree and creates if it it doesn't exist.",
        "operationId": "PostClientToken3",
        "responses": {
          "200": {
            "description": "Returns the client token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BTClientTokenResponse"
                },
                "example": {
                  "Result": {
                    "ClientToken": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Could not get a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/paymentmethod/token": {
      "get": {
        "tags": ["PaymentMethod"],
        "summary": "Gets the customer's active PaymentToken by CustomerId.",
        "description": "Gets the customer's active PaymentToken by CustomerId.",
        "operationId": "GetActivePaymentToken3",
        "responses": {
          "200": {
            "description": "Returns the client token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTokenResponse"
                },
                "example": {
                  "Result": {
                    "PaymentTokenId": 0,
                    "CustomerId": 0,
                    "PaymentTokenStatus": 1,
                    "ObscuredPaymentNumber": "string",
                    "HolderFullName": "string",
                    "PaymentIndex": 0,
                    "TokenCode": "string",
                    "PaymentProviderId": 0,
                    "PaymentMethodTypeId": 0,
                    "ExpiresYear": 0,
                    "ExpiresMonth": 0,
                    "PaymentMethodType": "string",
                    "StreetAddress": "string",
                    "Postcode": "string",
                    "TransactionSourceId": 0
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Could not find an active token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/postcode/{postcode}": {
      "get": {
        "tags": ["Postcode"],
        "summary": "Gets the postcode location.",
        "description": "Gets the postcode location.",
        "operationId": "GetPostcode3",
        "parameters": [{
          "name": "postcode",
          "in": "path",
          "description": "postcode to get location of.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "name": "includeAddresses",
          "in": "query",
          "description": "Flag to indicate if addresses should be returned.",
          "schema": {
            "type": "boolean",
            "default": false
          }
        }],
        "responses": {
          "200": {
            "description": "Postcode location returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "207": {
            "description": "Postcode location with non serviceable postcode returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Postcode location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/postcode/{postcode}/{house}": {
      "get": {
        "tags": ["Postcode"],
        "summary": "Gets the postcode location for a specific house.",
        "description": "Gets the postcode location for a specific house.",
        "operationId": "GetPostcodeAndHouse3",
        "parameters": [{
          "name": "postcode",
          "in": "path",
          "description": "Postcode to get location of.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "name": "house",
          "in": "path",
          "description": "House to get address for.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "Postcode location returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "207": {
            "description": "Postcode location with non serviceable postcode returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Postcode location not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostcodeLocationResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "Street": "string",
                    "Latitude": 0,
                    "Longitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string",
                    "NextPossibleDeliveryDate": "string",
                    "DriverName": "string",
                    "Addresses": [{
                      "Postcode": "string",
                      "House": "string",
                      "Street": "string",
                      "Locality": "string",
                      "Town": "string",
                      "County": "string",
                      "Longitude": 0,
                      "Latitude": 0,
                      "DeliveryDay": 0,
                      "DeliveryDayName": "string"
                    }],
                    "IsServiceable": true
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/address/autocomplete": {
      "get": {
        "tags": ["Postcode"],
        "summary": "Get Addresses by using Autocomplete functionality by providing a search term",
        "description": "Get Addresses by using Autocomplete functionality by providing a search term",
        "operationId": "GetAddressesAutocomplete3",
        "parameters": [{
          "name": "searchText",
          "in": "query",
          "description": "Search term to use for autocomplete",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "allMatches",
          "in": "query",
          "description": "Returns all suggestions when search term contains a postcode",
          "schema": {
            "type": "boolean",
            "default": false
          }
        }],
        "responses": {
          "200": {
            "description": "Autcomplete addresses returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompleteAddressResponse"
                },
                "example": {
                  "Result": [{
                    "Address": "string",
                    "Id": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompleteAddressResponse"
                },
                "example": {
                  "Result": [{
                    "Address": "string",
                    "Id": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompleteAddressResponse"
                },
                "example": {
                  "Result": [{
                    "Address": "string",
                    "Id": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompleteAddressResponse"
                },
                "example": {
                  "Result": [{
                    "Address": "string",
                    "Id": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/address/{id}": {
      "get": {
        "tags": ["Postcode"],
        "summary": "Get specific address by Id",
        "description": "Get specific address by Id",
        "operationId": "GetAddressById3",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Id of the address",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "Address returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdAddressResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdAddressResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdAddressResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdAddressResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdAddressResponse"
                },
                "example": {
                  "Result": {
                    "Postcode": "string",
                    "House": "string",
                    "Street": "string",
                    "Locality": "string",
                    "Town": "string",
                    "County": "string",
                    "Longitude": 0,
                    "Latitude": 0,
                    "DeliveryDay": 0,
                    "DeliveryDayName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/preference/{preferenceId}": {
      "get": {
        "tags": ["Preference"],
        "summary": "Gets the preference detail",
        "description": "Gets the preference detail",
        "operationId": "GetPreference3",
        "parameters": [{
          "name": "preferenceId",
          "in": "path",
          "description": "Format - int32. Preference Id to get details of.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int32"
          }
        }],
        "responses": {
          "200": {
            "description": "Preference returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Preference not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/preference/{preferenceId}": {
      "get": {
        "tags": ["Preference"],
        "summary": "Gets the customer preference detail",
        "description": "Gets the customer preference detail",
        "operationId": "GetCustomerPreference3",
        "parameters": [{
          "name": "preferenceId",
          "in": "path",
          "description": "Format - int32. Preference Id to get details of.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int32"
          }
        }],
        "responses": {
          "200": {
            "description": "Customer preference returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer preference not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/preferences": {
      "get": {
        "tags": ["Preference"],
        "summary": "Gets all the preferences.",
        "description": "Gets all the preferences.",
        "operationId": "GetPreferences3",
        "responses": {
          "200": {
            "description": "Preferences returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Preferences not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/preferences": {
      "get": {
        "tags": ["Preference"],
        "summary": "Gets all the preferences.",
        "description": "Gets all the preferences.",
        "operationId": "GetCustomerPreferences3",
        "responses": {
          "200": {
            "description": "Customer preferences returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Customer preferences not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Preference"],
        "summary": "Updates the preference details.",
        "description": "Updates the preference details.",
        "operationId": "SetCustomerPreferences3",
        "requestBody": {
          "description": "Preference information to be updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Preference"
                }
              },
              "example": [{
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Preference"
                }
              },
              "example": [{
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Preference"
                }
              },
              "example": [{
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Preference"
                }
              },
              "example": [{
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preferences updated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Preferences not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "409": {
            "description": "Conflict, unable to update",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                },
                "example": {
                  "Result": [{
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/preference": {
      "put": {
        "tags": ["Preference"],
        "summary": "Updates the preference details.",
        "description": "Updates the preference details.",
        "operationId": "SetCustomerPreference3",
        "requestBody": {
          "description": "Preference information to be updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              },
              "example": {
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              },
              "example": {
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              },
              "example": {
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              },
              "example": {
                "PreferenceId": 0,
                "PreferenceName": "string",
                "PreferenceQuestion": "string",
                "MultiSelect": true,
                "SortIndex": 0,
                "Options": [{
                  "OptionId": 0,
                  "PreferenceId": 0,
                  "OptionDescription": "string",
                  "Selected": true,
                  "SortIndex": 0,
                  "IsDefault": true
                }]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preference updated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Preference not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "409": {
            "description": "Conflict, unable to update",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceResponse"
                },
                "example": {
                  "Result": {
                    "PreferenceId": 0,
                    "PreferenceName": "string",
                    "PreferenceQuestion": "string",
                    "MultiSelect": true,
                    "SortIndex": 0,
                    "Options": [{
                      "OptionId": 0,
                      "PreferenceId": 0,
                      "OptionDescription": "string",
                      "Selected": true,
                      "SortIndex": 0,
                      "IsDefault": true
                    }]
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/reminders": {
      "get": {
        "tags": ["Reminders"],
        "summary": "Returns all Reminders for specified customer",
        "description": "Returns all Reminders for specified customer",
        "operationId": "GetCustomerReminders3",
        "responses": {
          "200": {
            "description": "Returns customer reminders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerRemindersResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "ReminderType": 1,
                    "ReminderTypeName": "string",
                    "ReminderPeriod": 1,
                    "ReminderPeriodName": "string",
                    "ReminderTime": 1,
                    "ReminderTimeName": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerRemindersResponse"
                },
                "example": {
                  "Result": [{
                    "CustomerId": 0,
                    "ReminderType": 1,
                    "ReminderTypeName": "string",
                    "ReminderPeriod": 1,
                    "ReminderPeriodName": "string",
                    "ReminderTime": 1,
                    "ReminderTimeName": "string"
                  }],
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/reminder/{reminderType}": {
      "get": {
        "tags": ["Reminders"],
        "summary": "Returns a reminder for a specified customer and reminder type",
        "description": "Returns a reminder for a specified customer and reminder type",
        "operationId": "GetCustomerReminder3",
        "parameters": [{
          "name": "reminderType",
          "in": "path",
          "description": "Type of reminder ACCustomer.Core.Models.Enums.ReminderType",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "Returns customer reminder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReminderResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "ReminderType": 1,
                    "ReminderTypeName": "string",
                    "ReminderPeriod": 1,
                    "ReminderPeriodName": "string",
                    "ReminderTime": 1,
                    "ReminderTimeName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Request is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReminderResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "ReminderType": 1,
                    "ReminderTypeName": "string",
                    "ReminderPeriod": 1,
                    "ReminderPeriodName": "string",
                    "ReminderTime": 1,
                    "ReminderTimeName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Reminder not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReminderResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "ReminderType": 1,
                    "ReminderTypeName": "string",
                    "ReminderPeriod": 1,
                    "ReminderPeriodName": "string",
                    "ReminderTime": 1,
                    "ReminderTimeName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Reminders"],
        "summary": "Updates values for specified CustomerReminder.",
        "description": "Sample Request:\r\n\r\n    PUT\r\n    {\r\n        \"customerId\": 25421,\r\n        \"reminderType\": DeadlineSMS,\r\n        \"period\": 1,\r\n        \"time\": 2\r\n    }\r\n    \r\nReminderPeriods: 1 = Never, 2 = On Deadline Day, 3 = Day Before Deadline, 4 = Two Days Before Deadline\r\nReminderTimes: 1 = 7am, 2 = 12pm, 3 = 3pm (inactive), 4 = 5pm, 5 = 10pm",
        "operationId": "PutCustomerReminder3",
        "parameters": [{
          "name": "reminderType",
          "in": "path",
          "description": "Type of reminder ACCustomer.Core.Models.Enums.ReminderType",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "description": "Reminder to update ACCustomer.Core.Models.CustomerReminder",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerReminder"
              },
              "example": {
                "CustomerId": 0,
                "ReminderType": 1,
                "ReminderTypeName": "string",
                "ReminderPeriod": 1,
                "ReminderPeriodName": "string",
                "ReminderTime": 1,
                "ReminderTimeName": "string"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerReminder"
              },
              "example": {
                "CustomerId": 0,
                "ReminderType": 1,
                "ReminderTypeName": "string",
                "ReminderPeriod": 1,
                "ReminderPeriodName": "string",
                "ReminderTime": 1,
                "ReminderTimeName": "string"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerReminder"
              },
              "example": {
                "CustomerId": 0,
                "ReminderType": 1,
                "ReminderTypeName": "string",
                "ReminderPeriod": 1,
                "ReminderPeriodName": "string",
                "ReminderTime": 1,
                "ReminderTimeName": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerReminder"
              },
              "example": {
                "CustomerId": 0,
                "ReminderType": 1,
                "ReminderTypeName": "string",
                "ReminderPeriod": 1,
                "ReminderPeriodName": "string",
                "ReminderTime": 1,
                "ReminderTimeName": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReminderResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "ReminderType": 1,
                    "ReminderTypeName": "string",
                    "ReminderPeriod": 1,
                    "ReminderPeriodName": "string",
                    "ReminderTime": 1,
                    "ReminderTimeName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReminderResponse"
                },
                "example": {
                  "Result": {
                    "CustomerId": 0,
                    "ReminderType": 1,
                    "ReminderTypeName": "string",
                    "ReminderPeriod": 1,
                    "ReminderPeriodName": "string",
                    "ReminderTime": 1,
                    "ReminderTimeName": "string"
                  },
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "404": {
            "description": "Item matching this Id could not be found."
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/subscriber": {
      "post": {
        "tags": ["Subscriber"],
        "summary": "Subscribe an email address to our newsletter",
        "description": "Subscribe an email address to our newsletter",
        "operationId": "Subscribe3",
        "requestBody": {
          "description": "ACCustomer.Core.Models.Subscriber to subscribe to our newsletter",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Subscriber"
              },
              "example": {
                "EmailAddress": "string",
                "SubscriberTypeId": 0
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscriber"
              },
              "example": {
                "EmailAddress": "string",
                "SubscriberTypeId": 0
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscriber"
              },
              "example": {
                "EmailAddress": "string",
                "SubscriberTypeId": 0
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Subscriber"
              },
              "example": {
                "EmailAddress": "string",
                "SubscriberTypeId": 0
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Oops, our application went bananas",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    },
    "/customer/paymentmethod/paymentmethod": {
      "post": {
        "tags": ["PaymentMethod"],
        "summary": "Generates a new unique token and updates the token with the payment provider",
        "description": "Generates a new unique token and updates the token with the payment provider",
        "operationId": "SavePaymentMethod",
        "parameters": [{
          "name": "nonce",
          "in": "query",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoContent"
                },
                "example": {
                  "StatusCode": 0
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "Success": true,
                  "Errors": [{
                    "ErrorCodeName": "string",
                    "ErrorMessage": "string",
                    "ErrorObject": {}
                  }]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "Postcode": {
            "type": "string",
            "description": "The postcode",
            "nullable": true
          },
          "House": {
            "type": "string",
            "description": "The house number or name",
            "nullable": true
          },
          "Street": {
            "type": "string",
            "description": "The street name",
            "nullable": true
          },
          "Locality": {
            "type": "string",
            "description": "The locality",
            "nullable": true
          },
          "Town": {
            "type": "string",
            "description": "The town",
            "nullable": true
          },
          "County": {
            "type": "string",
            "description": "The county",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "description": "The longitude",
            "format": "float",
            "nullable": true
          },
          "Latitude": {
            "type": "number",
            "description": "The latitude",
            "format": "float",
            "nullable": true
          },
          "DeliveryDay": {
            "type": "integer",
            "description": "The delivery day number that we deliver to the postcode addresses",
            "format": "int32",
            "nullable": true
          },
          "DeliveryDayName": {
            "type": "string",
            "description": "The name of the delivery day that we deliver to the postcode addresses",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of an addresses"
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "ErrorCodeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "ErrorObject": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/SingleAuthKeyResponse"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Responses.SingleAuthKeyResponse"
      },
      "AutocompleteAddress": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string",
            "description": "Address string to show, formatted to be user friendly",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "description": "Id of the address",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of the getAddress.io suggestions response"
      },
      "AutocompleteAddressResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutocompleteAddress"
            },
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a List of ACCustomer.Core.Models.AutocompleteAddress"
      },
      "BTClientToken": {
        "type": "object",
        "properties": {
          "ClientToken": {
            "type": "string",
            "description": "ClientToken returned from braintree for authentication",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class for returning the ClientToken as a JSON object"
      },
      "BTClientTokenResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/BTClientToken"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.BTClientToken"
      },
      "Customer": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "description": "Title of the customer",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the customer",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the customer",
            "nullable": true
          },
          "HomePhone": {
            "type": "string",
            "description": "Home phone number of the customer",
            "nullable": true
          },
          "MobilePhone": {
            "type": "string",
            "description": "Mobile phone number of the customer",
            "nullable": true
          },
          "EmailAddress": {
            "type": "string",
            "description": "Email address of the customer",
            "nullable": true
          },
          "ProfileName": {
            "type": "string",
            "description": "Public profile name for the customer when reviewing recipes et al",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth of the customer if set",
            "format": "date-time",
            "nullable": true
          },
          "CustomerType": {
            "$ref": "#/components/schemas/CustomerType"
          },
          "CustomerTypeName": {
            "type": "string",
            "description": "Customer Type name",
            "nullable": true,
            "readOnly": true
          },
          "CustomerStatus": {
            "$ref": "#/components/schemas/CustomerStatus"
          },
          "CustomerStatusName": {
            "type": "string",
            "description": "Customer status",
            "nullable": true,
            "readOnly": true
          },
          "CustomerActiveMarketingStatus": {
            "$ref": "#/components/schemas/CustomerActiveMarketingStatus"
          },
          "CustomerActiveMarketingStatusName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PaymentStatus": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "PaymentStatusName": {
            "type": "string",
            "description": "Payment status.",
            "nullable": true,
            "readOnly": true
          },
          "CanAccess": {
            "type": "boolean",
            "description": "Indicate whether customer is allowed to access their account",
            "readOnly": true
          },
          "CanOrder": {
            "type": "boolean",
            "description": "Indicate whether customer is allowed to order",
            "readOnly": true
          },
          "NumDeliveries": {
            "type": "integer",
            "description": "Number of deliveries that the customer has recieved since restart",
            "format": "int32"
          },
          "DayNumber": {
            "type": "integer",
            "description": "Allocated delivery day number",
            "format": "int32"
          },
          "SourceDescription": {
            "type": "string",
            "description": "The Source Description",
            "nullable": true
          },
          "SourceReference": {
            "type": "string",
            "description": "The Source Reference",
            "nullable": true
          },
          "Owes": {
            "type": "number",
            "description": "Amount the customer owes / we owe the customer",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a customer's details"
      },
      "CustomerActiveMarketingStatus": {
        "enum": [1, 2, 3, 4],
        "type": "integer",
        "description": "Enum for the active marketing status of a customer<p>Possible values:</p>\r\n<ul>\r\n<li><b>1 - NEW</b>: A customer who has 0 original total deliveries, 0 total deliveries and no orders waiting</li>\r\n<li><b>2 - NURSERY</b>: A customer who has less than 4 original total deliveries, and the same number of total deliveries</li>\r\n<li><b>3 - RESTARTING</b>: A customer who has 0 total deliveries and more than 0 original total deliveries and no orders waiting</li>\r\n<li><b>4 - EXISTING</b>: All other customers who do not meet the above 3 criteria fall into the Existing customer status type</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "CustomerAddress": {
        "type": "object",
        "properties": {
          "CustomerId": {
            "type": "integer",
            "description": "Id of the customer",
            "format": "int32"
          },
          "PropertyNotes": {
            "type": "string",
            "description": "Property notes",
            "nullable": true
          },
          "DeliveryNotes": {
            "type": "string",
            "description": "Delivery notes",
            "nullable": true
          },
          "Postcode": {
            "type": "string",
            "description": "The postcode",
            "nullable": true
          },
          "House": {
            "type": "string",
            "description": "The house number or name",
            "nullable": true
          },
          "Street": {
            "type": "string",
            "description": "The street name",
            "nullable": true
          },
          "Locality": {
            "type": "string",
            "description": "The locality",
            "nullable": true
          },
          "Town": {
            "type": "string",
            "description": "The town",
            "nullable": true
          },
          "County": {
            "type": "string",
            "description": "The county",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "description": "The longitude",
            "format": "float",
            "nullable": true
          },
          "Latitude": {
            "type": "number",
            "description": "The latitude",
            "format": "float",
            "nullable": true
          },
          "DeliveryDay": {
            "type": "integer",
            "description": "The delivery day number that we deliver to the postcode addresses",
            "format": "int32",
            "nullable": true
          },
          "DeliveryDayName": {
            "type": "string",
            "description": "The name of the delivery day that we deliver to the postcode addresses",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address that belongs to a customer extending ACCustomer.Core.Models.Address"
      },
      "CustomerAddressResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.CustomerAddress"
      },
      "CustomerChangePasswordRequest": {
        "type": "object",
        "properties": {
          "NewPassword": {
            "type": "string",
            "description": "The new password for the customer",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request body for changing a customer password"
      },
      "CustomerDate": {
        "type": "object",
        "properties": {
          "CustomerId": {
            "type": "integer",
            "description": "The id of the customer",
            "format": "int32"
          },
          "DeliveryDate": {
            "type": "string",
            "description": "The delivery Date",
            "format": "date-time"
          },
          "OnHoliday": {
            "type": "boolean",
            "description": "Is the Date a Holiday"
          },
          "WeekCommencing": {
            "type": "string",
            "description": "The id of the period",
            "format": "date-time"
          },
          "WeekEnding": {
            "type": "string",
            "description": "Name of the period",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Record for a customer Date"
      },
      "CustomerDatesResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerDate"
            },
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return an IEnumerable ACCustomer.Core.Models.CustomerDate"
      },
      "CustomerReminder": {
        "type": "object",
        "properties": {
          "CustomerId": {
            "type": "integer",
            "description": "The id of the customer",
            "format": "int32"
          },
          "ReminderType": {
            "$ref": "#/components/schemas/ReminderType"
          },
          "ReminderTypeName": {
            "type": "string",
            "description": "Name of the reminder",
            "nullable": true,
            "readOnly": true
          },
          "ReminderPeriod": {
            "$ref": "#/components/schemas/ReminderPeriod"
          },
          "ReminderPeriodName": {
            "type": "string",
            "description": "Name of the period",
            "nullable": true,
            "readOnly": true
          },
          "ReminderTime": {
            "$ref": "#/components/schemas/ReminderTime"
          },
          "ReminderTimeName": {
            "type": "string",
            "description": "Name of the time",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Settings for a customer reminder"
      },
      "CustomerReminderResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/CustomerReminder"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.CustomerReminder"
      },
      "CustomerRemindersResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerReminder"
            },
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a List ACCustomer.Core.Models.CustomerReminder"
      },
      "CustomerResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/Customer"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.Customer"
      },
      "CustomerStatus": {
        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        "type": "integer",
        "description": "Representation of a customer's general status<p>Possible values:</p>\r\n<ul>\r\n<li><b>0 - Unknown</b>: Status not assessed</li>\r\n<li><b>1 - NoDeliveryArea</b>: Customer cannot receive a delivery owing to their configured address</li>\r\n<li><b>2 - Prospect</b>: Minimally registered customer, not a full account</li>\r\n<li><b>3 - Active</b>: Standard Customer</li>\r\n<li><b>4 - Inactive</b>: Customer account deactivated</li>\r\n<li><b>5 - Cancelled</b>: Account has been cancelled</li>\r\n<li><b>6 - Blocked</b>: Account is explicitly deactivated</li>\r\n<li><b>7 - Suspended</b>: Temporary account restrictions in place</li>\r\n<li><b>8 - Deleted</b>: Account no longer exists</li>\r\n<li><b>9 - Registrant</b>: Account is only partially registered</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "CustomerType": {
        "enum": [1, 2, 3],
        "type": "integer",
        "description": "Representation of customer type<p>Possible values:</p>\r\n<ul>\r\n<li><b>1 - HomeDelivery</b>: Standard customer that has deliveries to their home</li>\r\n<li><b>2 - B2B</b>: Business to Business customer</li>\r\n<li><b>3 - Staff</b>: Staff account</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetByIdAddressResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/Address"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.Address"
      },
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Returnes a System.Object with the results of health checks."
      },
      "HolidayFilter": {
        "enum": [0, 1, 2],
        "type": "integer",
        "description": "Representation of holiday filter<p>Possible values:</p>\r\n<ul>\r\n<li><b>0 - AllDates</b>: All Dates</li>\r\n<li><b>1 - ExcludeHolidays</b>: Exclude holidays</li>\r\n<li><b>2 - HolidaysOnly</b>: Show holidays exclusively</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "NoContent": {
        "type": "object",
        "properties": {
          "StatusCode": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Option": {
        "type": "object",
        "properties": {
          "OptionId": {
            "type": "integer",
            "description": "The id of the option",
            "format": "int32"
          },
          "PreferenceId": {
            "type": "integer",
            "description": "The id of the preference",
            "format": "int32"
          },
          "OptionDescription": {
            "type": "string",
            "description": "The description of the option",
            "nullable": true
          },
          "Selected": {
            "type": "boolean",
            "description": "Does the preference have multi select options"
          },
          "SortIndex": {
            "type": "integer",
            "description": "The sort order of the preference",
            "format": "int32"
          },
          "IsDefault": {
            "type": "boolean",
            "description": "Is this the default option"
          }
        },
        "additionalProperties": false,
        "description": "Record for an option of a preference"
      },
      "PaymentStatus": {
        "enum": [1, 2, 3, 4, 5, 6],
        "type": "integer",
        "description": "Representation of a customer's payment status<p>Possible values:</p>\r\n<ul>\r\n<li><b>1 - Valid</b>: Payment status is valid</li>\r\n<li><b>2 - Excempt</b>: Payment status is excempt</li>\r\n<li><b>3 - NoDetails</b>: No payment details present</li>\r\n<li><b>4 - Expired</b>: Payment details are expired</li>\r\n<li><b>5 - Declined</b>: Payment status is declined</li>\r\n<li><b>6 - Expiring</b>: Payment details are expiring</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "PaymentToken": {
        "type": "object",
        "properties": {
          "PaymentTokenId": {
            "type": "integer",
            "description": "The customer's PaymentToken ID",
            "format": "int32"
          },
          "CustomerId": {
            "type": "integer",
            "description": "The customer's ID",
            "format": "int32"
          },
          "PaymentTokenStatus": {
            "$ref": "#/components/schemas/PaymentTokenStatus"
          },
          "ObscuredPaymentNumber": {
            "type": "string",
            "description": "The formatted and obscured payment number of the card or service",
            "nullable": true
          },
          "HolderFullName": {
            "type": "string",
            "description": "The customer's full name attached to the PaymentToken",
            "nullable": true
          },
          "PaymentIndex": {
            "type": "integer",
            "description": "Customer's have a PaymentIndex for each of their TokenCodes stored in our dbo.CardToken table",
            "format": "int32"
          },
          "TokenCode": {
            "type": "string",
            "description": "Unique GUID that references a specific payment method",
            "nullable": true
          },
          "PaymentProviderId": {
            "type": "integer",
            "description": "The Id of the payment provider we use such as BrainTree or Stripe",
            "format": "int32"
          },
          "PaymentMethodTypeId": {
            "type": "integer",
            "description": "The Id of the payment type such as credit card, google pay or apple pay",
            "format": "int32"
          },
          "ExpiresYear": {
            "type": "integer",
            "description": "Payment Method expiry year",
            "format": "int32",
            "nullable": true
          },
          "ExpiresMonth": {
            "type": "integer",
            "description": "Payment Method expiry month",
            "format": "int32",
            "nullable": true
          },
          "PaymentMethodType": {
            "type": "string",
            "description": "The type of payment method used",
            "nullable": true
          },
          "StreetAddress": {
            "type": "string",
            "description": "The customer's street address",
            "nullable": true
          },
          "Postcode": {
            "type": "string",
            "description": "The Customer's postcode",
            "nullable": true
          },
          "TransactionSourceId": {
            "type": "integer",
            "description": "TransactionSourceId represents whether the customer's payment method was registered online or via our cutomer support team",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A payment token representation"
      },
      "PaymentTokenResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.PaymentToken"
      },
      "PaymentTokenStatus": {
        "enum": [1, 2, 3, 4],
        "type": "integer",
        "description": "Representation of a customer's PaymentToken status<p>Possible values:</p>\r\n<ul>\r\n<li><b>1 - Active</b>: PaymentToken successfully authorised</li>\r\n<li><b>2 - Inactive</b>: PaymentToken authorisation failed or PaymentToken deleted</li>\r\n<li><b>3 - Remove</b>: PaymentToken to be deleted</li>\r\n<li><b>4 - AP_Active</b>: PaymentToken on AP system</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "PostcodeLocation": {
        "type": "object",
        "properties": {
          "Postcode": {
            "type": "string",
            "description": "The postcode",
            "nullable": true
          },
          "Street": {
            "type": "string",
            "description": "The street of the postcode location",
            "nullable": true
          },
          "Latitude": {
            "type": "number",
            "description": "The latitude of the postcode location",
            "format": "double",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "description": "The longitude of the postcode location",
            "format": "double",
            "nullable": true
          },
          "DeliveryDay": {
            "type": "integer",
            "description": "The delivery day number that we deliver to the postcode addresses",
            "format": "int32",
            "nullable": true
          },
          "DeliveryDayName": {
            "type": "string",
            "description": "The name of the delivery day that we deliver to the postcode addresses",
            "nullable": true
          },
          "NextPossibleDeliveryDate": {
            "type": "string",
            "description": "The next possible delivery date for a postcode\r\nNote: This date may not be the same day name as the returned DeliveryDayName owing to Christmas delivery changes, \r\nit is the responsibility of the caller to indicate if these do not match",
            "format": "date-time",
            "nullable": true
          },
          "DriverName": {
            "type": "string",
            "description": "The name of the driver that delivers to the postcode addresses",
            "nullable": true
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "description": "List of addresses that belong to the postcode",
            "nullable": true
          },
          "IsServiceable": {
            "type": "boolean",
            "description": "bool to determine if postcode location is serviceable",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a postcode location and associated addresses."
      },
      "PostcodeLocationResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/PostcodeLocation"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.PostcodeLocation"
      },
      "Preference": {
        "type": "object",
        "properties": {
          "PreferenceId": {
            "type": "integer",
            "description": "[Internal] Id of the preference",
            "format": "int32"
          },
          "PreferenceName": {
            "type": "string",
            "description": "Name of the preference",
            "nullable": true
          },
          "PreferenceQuestion": {
            "type": "string",
            "description": "The preference question",
            "nullable": true
          },
          "MultiSelect": {
            "type": "boolean",
            "description": "Does the preference have multi select options"
          },
          "SortIndex": {
            "type": "integer",
            "description": "The sort order of the preference",
            "format": "int32"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            },
            "description": "Queryable collection of Options for the preference",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a preference"
      },
      "PreferenceResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/Preference"
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a ACCustomer.Core.Models.Preference"
      },
      "PreferencesResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Preference"
            },
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return a List ACCustomer.Core.Models.Preference"
      },
      "ReminderPeriod": {
        "enum": [1, 2, 3, 4, 5],
        "type": "integer",
        "description": "Representation of what day a reminder is sent<p>Possible values:</p>\r\n<ul>\r\n<li><b>1 - Never</b>: Reminder will never be sent</li>\r\n<li><b>2 - OnDeadline</b>: Reminder will be sent on deadline day</li>\r\n<li><b>3 - DayBefore</b>: Reminder will be sent the day before deadline day</li>\r\n<li><b>4 - TwoDaysBefore</b>: Reminder will be sent two days before deadline day</li>\r\n<li><b>5 - DeliveryDay</b>: Reminder will be sent on delivery day</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "ReminderTime": {
        "enum": [1, 2, 3, 4, 5],
        "type": "integer",
        "description": "Representation of what time a reminder is sent<p>Possible values:</p>\r\n<ul>\r\n<li><b>1 - SevenAM</b>: 07:00</li>\r\n<li><b>2 - TwelvePM</b>: 12:00</li>\r\n<li><b>3 - ThreePM</b>: 15:00</li>\r\n<li><b>4 - FivePM</b>: 17:00</li>\r\n<li><b>5 - TenPM</b>: 22:00</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "ReminderType": {
        "enum": [1, 2, 5, 6],
        "type": "integer",
        "description": "Representation of what type of reminder is set<p>Possible values:</p>\r\n<ul>\r\n<li><b>1 - DeadlineEmail</b>: Email sent on deadline</li>\r\n<li><b>2 - DeadlineSMS</b>: SMS sent on deadline</li>\r\n<li><b>5 - DeadlineNotification</b>: Notification sent on deadline</li>\r\n<li><b>6 - ETAAndDeliverySMS</b>: ETA and Delivery SMS</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "SingleAuthKeyRequest": {
        "type": "object",
        "properties": {
          "PagePath": {
            "type": "string",
            "description": "Page path",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of a SingleAuthKeyRequest"
      },
      "SingleAuthKeyResponse": {
        "type": "object",
        "properties": {
          "PagePath": {
            "type": "string",
            "description": "Page path",
            "nullable": true
          },
          "KeyIdentifier": {
            "type": "string",
            "description": "Key identifier",
            "format": "uuid"
          },
          "ExpiresAt": {
            "type": "string",
            "description": "When the auth key expires",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a SingleAuthKeyResponse"
      },
      "Source": {
        "type": "object",
        "properties": {
          "SourceId": {
            "type": "integer",
            "description": "Id of the Source",
            "format": "int32"
          },
          "SourceDescription": {
            "type": "string",
            "description": "Description of the SourceDescription",
            "nullable": true
          },
          "DetailRequest": {
            "type": "string",
            "description": "Description of the DetailRequest",
            "nullable": true
          },
          "IsInternal": {
            "type": "boolean",
            "description": "Description of the IsInternal"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Source's details"
      },
      "SourcesResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            },
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return an IEnumerable ACCustomer.Core.Models.Source"
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string",
            "description": "Email address of the subscriber",
            "nullable": true
          },
          "SubscriberTypeId": {
            "type": "integer",
            "description": "The type of subscriber",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Model representation of a subscriber"
      },
      "Title": {
        "type": "object",
        "properties": {
          "TitleId": {
            "type": "integer",
            "description": "The Id of the title Record",
            "format": "int32"
          },
          "TitleDescription": {
            "type": "string",
            "description": "The description of the title Record",
            "nullable": true
          },
          "SpecifyOther": {
            "type": "boolean",
            "description": "Whether other value is needed"
          },
          "SortIndex": {
            "type": "integer",
            "description": "The order to sort",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Title Records"
      },
      "TitlesResponse": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Title"
            },
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to return am IEnumerable ACCustomer.Core.Models.Title"
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "apiKeyQuery": {
        "type": "apiKey",
        "name": "subscription-key",
        "in": "query"
      }
    }
  },
  "security": [{
    "apiKeyHeader": []
  }, {
    "apiKeyQuery": []
  }],
  "tags": [{
    "name": "Authentication",
    "description": "Endpoint providing access to customer information."
  }, {
    "name": "Customer",
    "description": "Endpoint providing access to customer information."
  }, {
    "name": "CustomerAddress",
    "description": "Endpoint providing access to customer address information."
  }, {
    "name": "Postcode",
    "description": "Endpoint providing access to customer information."
  }, {
    "name": "Preference",
    "description": "Endpoint providing access to preferences information."
  }, {
    "name": "Subscriber",
    "description": "Controller for the subscriber functionality"
  }]
}
